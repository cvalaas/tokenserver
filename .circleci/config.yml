version: 2.1
defaults:
  docker_login: &docker_login
      run:
          name: Login to Dockerhub
          command: |
              if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                  echo "Skipping Login to Dockerhub, no credentials."
              else
                  echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
              fi

jobs:
  build:
    docker:
      - image: circleci/python
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Create version.json
          command: |
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" | tee version.json
      - store_artifacts:
          path: version.json

      - run:
          name: Build deployment container image
          command: docker build -t app:build .
      - run:
          name: Test flake8
          command: docker run -it app:build test_flake8
      - run:
          name: Test nose
          command: docker run -it app:build test_nose
      - run:
          name: Test that the `pypy` entrypoint responds
          command: |
            set -e
            docker run -it app:build pypy --version
      - run:
          name: Test that the `server` entrypoint starts ok
          command: |
            set -e
            container_name=$(docker run -it -e MOZSVC_SQLURI="sqlite:////tmp/tokenserver.db" --rm -d app:build server)
            # Grab the logs now in case this container crashes and is removed.
            (docker logs --follow $container_name &)
            sleep 10
            # If the container above stops before running 10 seconds, the
            # `--rm` will remove it and this `docker inspect` will exit
            # non-zero, failing this step.
            docker inspect -f '{{.State.Running}}' $container_name
            docker kill $container_name
      - store_test_results:
          path: test_results
      - run:
          name: Push to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              bin/ci/deploy-dockerhub.sh latest
            fi
            if [[ "${CIRCLE_BRANCH}" == feature* ]] || [[ "${CIRCLE_BRANCH}" == dockerpush* ]]; then
              bin/ci/deploy-dockerhub.sh "$CIRCLE_BRANCH"
            fi
            if [ -n "${CIRCLE_TAG}" ]; then
              bin/ci/deploy-dockerhub.sh "$CIRCLE_TAG"
            fi

workflows:
  version: 2

  # workflow jobs are _not_ run in tag builds by default
  # we use filters to whitelist jobs that should be run for tags

  # workflow jobs are run in _all_ branch builds by default
  # we use filters to blacklist jobs that shouldn't be run for a branch

  # see: https://circleci.com/docs/2.0/workflows/#git-tag-job-execution

  build-test-push:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
